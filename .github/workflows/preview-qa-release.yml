name: ðŸš€QA Preview Release


env:
  PROJECT_NAME: Velaptor
  NET_SDK_VERSION: 6.0.101 # Changing this means changing ARTIFACT_FOLDER_NAME
  ARTIFACT_FOLDER_NAME: '6.0.101' # Changing this means changing NET_SDK_VERSION


on:
  workflow_dispatch:

jobs:
  Build_And_Test_Library:
    name: Build & Test (Library)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.NET_SDK_VERSION }}

      - name: Get Version From Project File
        id: proj-file-version
        uses: KinsonDigital/vget@v0.4.0
        with:
          repo-owner-and-name: '${{ github.repository }}'
          branch: '${{ github.ref }}'
          relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Workflow Info
        run: |
          echo "Build Config: Debug"
          echo "Current Branch: ${{ github.ref }}"
          echo "Project File Version: ${{ steps.proj-file-version.outputs.version }}"

      - name: Restore Dependencies
        run: dotnet restore "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"

      - name: Build
        run: dotnet build "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" `
          -c Debug `
          --no-restore

      - name: Execute Unit Tests
        run: dotnet test "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/${{ env.PROJECT_NAME }}Tests.csproj" `
          -c Debug `
          --collect:"XPlat Code Coverage" `
          --no-restore

      - name: Publish Code Coverage Results
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/TestResults/**/coverage.cobertura.xml





#  Validate_Version:
#    name: Validate Version
#    runs-on: windows-latest
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Get Version From Project File
#      id: proj-file-version
#      uses: KinsonDigital/vget@v0.4.0
#      with:
#        repo-owner-and-name: '${{ github.repository }}'
#        branch: '${{ github.ref }}'
#        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#
#    # TODO: Remove this once the VersionValidator has its 'fail-if-contains' feature is implemented
#    - name: Validate Version Type
#      run: |
#        $projFileVersion = "${{ steps.proj-file-version.outputs.version }}";
#
#        # Fail if the version is not a preview type
#        if ($projFileVersion.Contains("-preview.") -eq $false)
#        {
#            echo "The version '${{ steps.proj-file-version.outputs.version }}' must be a preview version type for QA Preview releases.";
#            echo "Valid Version Example: v1.2.3-preview.4";
#
#            exit 1 # Fail
#        }
#
#    # TODO: Make use of new optional input 'fail-if-contains' for preview.3 of this action once it has been implemented
#    - name: Validate Version
#      uses: KinsonDigital/VersionValidator@v1.0.0-preview.2
#      with:
#        nuget-package-name: "KinsonDigital.${{ env.PROJECT_NAME }}"
#        version: "${{ steps.proj-file-version.outputs.version }}"
#        check-nuget: "true"
#        fail-if-nuget-version-exists: "true"


#  Validate_Branch_Name:
#    name: Validate Branch Name
#    runs-on: windows-latest
#    steps:
#    # TODO: Replace this with the new upcoming branch validation github action
#    - name: Validate Branch Name
#      run: |
#        # If the branch is not a 'preview/v*.*.*-preview.*' branch, fail the workflow
#        if ("${{ github.ref }}".Contains("preview/v") -eq $false -or "${{ github.ref }}".Contains("-preview.") -eq $false)
#        {
#          echo "QA Preview releases can only be performed with a preview branch."
#          echo "Example Preview Branch Name: preview/v1.2.3-preview.4"
#          exit 1 # Fail
#        }
#        else
#        {
#          echo "Branch '${{ github.ref }}' is a valid preview branch."
#        }


#  Build_And_Test_Library:
#    name: Build & Test (Library)
#    runs-on: windows-latest
#    needs: [
#      Validate_Version,
#      Validate_Branch_Name
#    ]
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Setup .NET SDK
#      uses: actions/setup-dotnet@v1
#      with:
#        dotnet-version: ${{ env.NET_SDK_VERSION }}
#
#    - name: Get Version From Project File
#      id: proj-file-version
#      uses: KinsonDigital/vget@v0.4.0
#      with:
#        repo-owner-and-name: '${{ github.repository }}'
#        branch: '${{ github.ref }}'
#        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#
#    - name: Display Workflow Info
#      run: |
#        echo "Build Config: Debug"
#        echo "Current Branch: ${{ github.ref }}"
#        echo "Project File Version: ${{ steps.proj-file-version.outputs.version }}"
#
#    - name: Restore Dependencies
#      run: dotnet restore "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"
#
#    - name: Build
#      run: dotnet build "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" `
#        -c Debug `
#        --no-restore
#
#    - name: Execute Unit Tests
#      run: dotnet test "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/${{ env.PROJECT_NAME }}Tests.csproj" `
#        -c Debug `
#        --collect:"Code Coverage" `
#        --no-restore
#
#    - name: Publish Code Coverage Results
#      uses: codecov/codecov-action@v1.5.2
#      with:
#        token: ${{ secrets.CODECOV_TOKEN }}
#        file: ${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/TestResults/**/coverage.cobertura.xml

#    - name: Publish Build Artifacts
#      uses: actions/upload-artifact@v2.2.3
#      with:
#        name: ${{ env.PROJECT_NAME }} Build Artifacts
#        path: ${{ github.workspace }}/${{ env.PROJECT_NAME }}/bin/Debug/net${{ env.ARTIFACT_FOLDER_NAME }}
#        error: There was an issue uploading the build artifact

#    - name: Setup Nuget
#      uses: NuGet/setup-nuget@v1.0.5


#  Build_And_Release_Testing_App:
#    name: Build & Release (Testing App)
#    runs-on: windows-latest
#    needs: [
#      Build_And_Test_Library,
#      Validate_Version,
#      Validate_Branch_Name,
#    ]
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Get Version From Project File
#      id: proj-file-version
#      uses: KinsonDigital/vget@v0.4.0
#      with:
#        repo-owner-and-name: '${{ github.repository }}'
#        branch: '${{ github.ref }}'
#        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#
#    - name: Setup .NET SDK
#      uses: actions/setup-dotnet@v1
#      with:
#        dotnet-version: ${{ env.NET_SDK_VERSION }}
#
#    - name: Restore Dependencies
#      run: dotnet restore "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Testing/${{ env.PROJECT_NAME }}Testing.csproj"
#
#    - name: Build Testing App
#      run: |
#        dotnet publish "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Testing/${{ env.PROJECT_NAME }}Testing.csproj" `
#          -c Debug `
#          -o "${{ github.workspace }}/Testing/PreviewQARelease/" `
#          --no-restore `
#
#    - name: Package Testing App
#      run: |
#        Compress-Archive -Path "${{ github.workspace }}/Testing/PreviewQARelease" `
#          -DestinationPath "${{ github.workspace }}/${{ env.PROJECT_NAME }}-TestingApp-v${{ steps.proj-file-version.outputs.version }}.zip" `
#          -Force
#
#    - name: Release Testing Application (QA)
#      uses: softprops/action-gh-release@v0.1.12
#      with:
#        tag_name: qa-prev-v${{ steps.proj-file-version.outputs.version }}
#        body: |
#          ${{ env.PROJECT_NAME }} - QA preview release for Velaptor version v${{ steps.proj-file-version.outputs.version }}
#          Execute the testing application in the **_${{ env.PROJECT_NAME }}-TestingApp-v${{ steps.proj-file-version.outputs.version }}.zip_** file to perform manual testing.
#        files: ${{ env.PROJECT_NAME }}-TestingApp-v${{ steps.proj-file-version.outputs.version }}.zip
#        prerelease: true
